[tool.poetry]
name = "birthday-api"
version = "0.1.0"
description = ""
authors = ["Kulunchick <nikolikrasovski@gmail.com>"]
readme = "README.md"
packages = []

[tool.poetry.dependencies]
python = "^3.11"
fastapi = "^0.111.0"
sqlalchemy = "^2.0.30"
alembic-postgresql-enum = "^1.2.0"
pydantic-settings = "^2.2.1"


[tool.poetry.group.lint.dependencies]
ruff = "^0.7.0"


[tool.poetry.group.types.dependencies]
mypy = "^1.10.0"


[tool.poetry.group.test.dependencies]
pytest = "^8.2.1"
pytest-asyncio = "^0.23.7"
pytest-cov = "^5.0.0"
asynctest = "^0.13.0"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
    "W191",  # indentation contains tabs
]


[tool.mypy]
plugins = [
  "pydantic.mypy"
]

follow_imports = "silent"
warn_redundant_casts = true
warn_unused_ignores = true
disallow_any_generics = true
check_untyped_defs = true
no_implicit_reexport = true

# for strict mypy: (this is the tricky one :-))
disallow_untyped_defs = true
mypy_path = "$MYPY_CONFIG_FILE_DIR/stubs"


[tool.pydantic-mypy]
init_forbid_extra = true
init_typed = true
warn_required_dynamic_aliases = true

[tool.pytest.ini_options]
asyncio_mode = "auto"
testpaths = [
    "tests",
]
filterwarnings = [
    "error",
    "ignore::pytest.PytestUnraisableExceptionWarning",
]

[tool.coverage.run]
branch = false
parallel = true
omit = [
    "app/__about__.py",
]

[tool.coverage.report]
exclude_lines = [
    "if __name__ == .__main__.:",
    "pragma: no cover",
    "if TYPE_CHECKING:",
    "@abstractmethod",
    "@overload",
]